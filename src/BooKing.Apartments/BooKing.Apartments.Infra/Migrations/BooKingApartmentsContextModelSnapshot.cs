// <auto-generated />
using System;
using BooKing.Apartments.Infra.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BooKing.Apartments.Infra.Migrations
{
    [DbContext(typeof(BooKingApartmentsContext))]
    partial class BooKingApartmentsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AmenityApartment", b =>
                {
                    b.Property<Guid>("AmenitiesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AmenitiesId", "ApartmentId");

                    b.HasIndex("ApartmentId");

                    b.ToTable("AmenityApartment", "Apartment");
                });

            modelBuilder.Entity("BooKing.Apartments.Domain.Entities.Amenity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Amenity", "Apartment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2f77dd6-80fa-4ef4-bcfc-89d2125ddf50"),
                            Name = "WiFi"
                        },
                        new
                        {
                            Id = new Guid("1b06cfeb-2f17-4e5b-b5e4-7f37a63c6121"),
                            Name = "Pool"
                        });
                });

            modelBuilder.Entity("BooKing.Apartments.Domain.Entities.Apartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CleaningFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("LastBookedOnUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Apartment", "Apartment");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0b0fa3d-2d3b-44f1-b568-23d3f7c1f2ad"),
                            CleaningFee = 20m,
                            Description = "A beautiful luxury apartment.",
                            ImagePath = "/images/luxury.jpg",
                            Name = "Luxury Apartment",
                            OwnerId = "owner123",
                            Price = 150m
                        },
                        new
                        {
                            Id = new Guid("3c7a97b7-5898-4030-a8d3-1f4d1b2049f3"),
                            CleaningFee = 15m,
                            Description = "A cozy and comfortable apartment.",
                            ImagePath = "/images/cozy.jpg",
                            Name = "Cozy Apartment",
                            OwnerId = "owner456",
                            Price = 100m
                        });
                });

            modelBuilder.Entity("AmenityApartment", b =>
                {
                    b.HasOne("BooKing.Apartments.Domain.Entities.Amenity", null)
                        .WithMany()
                        .HasForeignKey("AmenitiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BooKing.Apartments.Domain.Entities.Apartment", null)
                        .WithMany()
                        .HasForeignKey("ApartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BooKing.Apartments.Domain.Entities.Apartment", b =>
                {
                    b.OwnsOne("BooKing.Apartments.Domain.ValueObjects.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("ApartmentId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("State")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ZipCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ApartmentId");

                            b1.ToTable("Apartment", "Apartment");

                            b1.WithOwner()
                                .HasForeignKey("ApartmentId");
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
